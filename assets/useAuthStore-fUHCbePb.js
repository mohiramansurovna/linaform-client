import{c as T}from"./react-BTsYd7cd.js";function _(s,l){let t;try{t=s()}catch{return}return{getItem:a=>{var r;const d=h=>h===null?null:JSON.parse(h,void 0),c=(r=t.getItem(a))!=null?r:null;return c instanceof Promise?c.then(d):d(c)},setItem:(a,r)=>t.setItem(a,JSON.stringify(r,void 0)),removeItem:a=>t.removeItem(a)}}const S=s=>l=>{try{const t=s(l);return t instanceof Promise?t:{then(n){return S(n)(t)},catch(n){return this}}}catch(t){return{then(n){return this},catch(n){return S(n)(t)}}}},b=(s,l)=>(t,n,a)=>{let r={storage:_(()=>localStorage),partialize:e=>e,version:0,merge:(e,f)=>({...f,...e}),...l},d=!1;const c=new Set,h=new Set;let u=r.storage;if(!u)return s((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${r.name}', the given storage is currently unavailable.`),t(...e)},n,a);const p=()=>{const e=r.partialize({...n()});return u.setItem(r.name,{state:e,version:r.version})},A=a.setState;a.setState=(e,f)=>{A(e,f),p()};const v=s((...e)=>{t(...e),p()},n,a);a.getInitialState=()=>v;let m;const I=()=>{var e,f;if(!u)return;d=!1,c.forEach(o=>{var i;return o((i=n())!=null?i:v)});const g=((f=r.onRehydrateStorage)==null?void 0:f.call(r,(e=n())!=null?e:v))||void 0;return S(u.getItem.bind(u))(r.name).then(o=>{if(o)if(typeof o.version=="number"&&o.version!==r.version){if(r.migrate){const i=r.migrate(o.state,o.version);return i instanceof Promise?i.then(y=>[!0,y]):[!0,i]}console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return[!1,o.state];return[!1,void 0]}).then(o=>{var i;const[y,k]=o;if(m=r.merge(k,(i=n())!=null?i:v),t(m,!0),y)return p()}).then(()=>{g?.(m,void 0),m=n(),d=!0,h.forEach(o=>o(m))}).catch(o=>{g?.(void 0,o)})};return a.persist={setOptions:e=>{r={...r,...e},e.storage&&(u=e.storage)},clearStorage:()=>{u?.removeItem(r.name)},getOptions:()=>r,rehydrate:()=>I(),hasHydrated:()=>d,onHydrate:e=>(c.add(e),()=>{c.delete(e)}),onFinishHydration:e=>(h.add(e),()=>{h.delete(e)})},r.skipHydration||I(),m||v},H=b,R=T()(H((s,l)=>({user:null,accessToken:null,isAuthenticated:!1,setAuth:(t,n)=>s({accessToken:t,user:n,isAuthenticated:!0}),setToken:t=>s(n=>({accessToken:t,isAuthenticated:!!t,user:n.user})),clearAuth:()=>s({accessToken:null,user:null,isAuthenticated:!1}),initializeFromStorage:()=>{const t=l();t.accessToken&&!t.isAuthenticated&&s({isAuthenticated:!0})}}),{name:"auth-store",partialize:s=>({accessToken:s.accessToken,user:s.user,isAuthenticated:s.isAuthenticated})}));export{R as u};
